CS370 Lecture Notes
Ryan Schwarzkopf

4 segments of memory
1) CODE Segment. Starts at 0. 
2) Data - all global and static variables. Just above code section
3) Heap - malloc and new()
4) Stack - to handle local and temporary values. Moves from top going down.

Context free Grammar:
A set of terminals (token symbols come from lex)
A set of nonterminals. All on the left hand side.
A set of productions
A designated start symbol

Sentential form can have nonterminals. All of the productions steps you can make from a start symbol.
A sentence is sentential form and has no nonterminals.

Chomsky hierarchy:
1)Regular
2)Context-free
3)Context Sensitive
4)Unrestricted

Two parts of compilation: Analysis, Synthesis

Syntax is the sentence constructed correctly?
Semantics is the correct sentence make sense? From symbol table

Synthesize and Inherited
int x;
x=1;
x=1+3;

String S;
S=1+"3";

Lexical Analysis: Takes character strings and converts them to tokens. Also it can identify illegal characters.
Syntax Analysis: The order of tokens recieved is a valid order. Cannot distinguish meaning. (int x; int x;) considered both valid, context free.
Purpose of Symbol Table: To allow syntax analysis to have some semantic analysis. (keep track of name, level, and type)
Syntax Directed Semantic Action, Where do we find it?: Found in YACC: C code. It adds context to the token sequence. Check for parameter signature correctness.
We use symbol table. Used to build a tree, so that we can make executable code.



struct LIST{int type; int data; LIST* next}
//PRE ptr to two parameter lists
//POST 1 if both are the same, else 0.
int check_params(LIST* formals, LIST* actuals) {
	if(formals == null && actuals == null) return 1;
	if(formals== null || actuals == null) return 0;
	if(formals->type != actuals-> type) return 0;
	return check_params(formals->next, actuals->next);
}

Chapter 3.

Nondeterministic Finite Automata: Diagrammed with transition graph. If any time you could be at end of input you are at end.
Deterministic Finite Automata: has no epsilon. Can only be at one position at a time.
NFA and DFA are both equal and infinite. You can make any NFA to DFA and vise versa.
Thompson construction builds diagram for NFA.
Subset construction builds DFA from NFA.
